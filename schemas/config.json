{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Options",
  "description": "Configuration options for the language server.",
  "type": "object",
  "properties": {
    "diagnostic_options": {
      "description": "Options related to diagnostics",
      "default": {
        "string_argument_style": "none"
      },
      "allOf": [
        {
          "$ref": "#/definitions/DiagnosticOptions"
        }
      ]
    },
    "language_retrieval_patterns": {
      "description": "A list of patterns to aid the LSP in finding a language, given a file path. Patterns must have one capture group which represents the language name. Ordered from highest to lowest precedence.",
      "default": [],
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "parser_aliases": {
      "description": "A map of parser aliases.",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "parser_install_directories": {
      "description": "A list of strings representing directories to search for parsers, of the form `<lang>.(so|dll|dylib)` or `tree-sitter-<lang>.wasm`.\n\nSupports environment variable expansion of the form `${VAR}`.",
      "default": [],
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "valid_captures": {
      "description": "A map from query file name to valid captures. Valid captures are represented as a map from capture name (sans `@`) to a short (markdown format) description. Note that captures prefixed with an underscore are always permissible.",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "valid_directives": {
      "description": "A map of directive names (sans `#` and `!`) to parameter specifications.",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/Predicate"
      }
    },
    "valid_predicates": {
      "description": "A map of predicate names (sans `#` and `?`) to parameter specifications.",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/PredicateAux"
      }
    }
  },
  "definitions": {
    "DiagnosticOptions": {
      "description": "Options related to diagnostics",
      "type": "object",
      "required": [
        "string_argument_style"
      ],
      "properties": {
        "string_argument_style": {
          "description": "The style for predicate string arguments",
          "allOf": [
            {
              "$ref": "#/definitions/StringArgumentStyle"
            }
          ]
        }
      }
    },
    "Predicate": {
      "description": "A type specification for a directive.",
      "type": "object",
      "required": [
        "description",
        "parameters"
      ],
      "properties": {
        "description": {
          "description": "A short description of the predicate (in Markdown format).",
          "type": "string"
        },
        "parameters": {
          "description": "The list of valid parameter types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredicateParameter"
          },
          "minItems": 1
        }
      }
    },
    "PredicateAux": {
      "description": "A type specification for a predicate.",
      "type": "object",
      "required": [
        "description",
        "parameters"
      ],
      "properties": {
        "any": {
          "description": "Whether this predicate supports a `any-` prefixed variant. Defaults to `false`.",
          "default": false,
          "type": "boolean"
        },
        "description": {
          "description": "A short description of the predicate (in Markdown format).",
          "type": "string"
        },
        "not": {
          "description": "Whether this predicate supports a `not-` prefixed variant. Defaults to `true`.",
          "default": true,
          "type": "boolean"
        },
        "parameters": {
          "description": "The list of valid parameter types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredicateParameter"
          },
          "minItems": 1
        }
      }
    },
    "PredicateParameter": {
      "description": "A parameter type reference.\n\nParameters can be one or both of two types (a capture or a string), and can be required, optional, or \"variadic\" (there can be zero-to-many of them).",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "arity": {
          "description": "The arity of the predicate parameter. Must be `\"required\"`, `\"optional\"`, or `\"variadic\"`.",
          "default": "required",
          "allOf": [
            {
              "$ref": "#/definitions/PredicateParameterArity"
            }
          ]
        },
        "description": {
          "description": "An optional description of this parameter.",
          "type": [
            "string",
            "null"
          ]
        },
        "type": {
          "description": "The type of this parameter. Can be `capture`, `string`, or `any` (either a capture or a string).",
          "allOf": [
            {
              "$ref": "#/definitions/PredicateParameterType"
            }
          ]
        }
      }
    },
    "PredicateParameterArity": {
      "description": "The arity of the predicate parameter.",
      "oneOf": [
        {
          "description": "A regular, required parameter.",
          "type": "string",
          "enum": [
            "required"
          ]
        },
        {
          "description": "A parameter which can be omitted. Must only be followed by other optional parameters.",
          "type": "string",
          "enum": [
            "optional"
          ]
        },
        {
          "description": "A parameter which can appear zero-to-many times. Must be the last parameter if present.",
          "type": "string",
          "enum": [
            "variadic"
          ]
        }
      ]
    },
    "PredicateParameterType": {
      "description": "The type of the predicate parameter.",
      "oneOf": [
        {
          "description": "Must be a capture (e.g. `@variable`).",
          "type": "string",
          "enum": [
            "capture"
          ]
        },
        {
          "description": "Must be a string (e.g. `foo`).",
          "type": "string",
          "enum": [
            "string"
          ]
        },
        {
          "description": "Can be either a capture or a string.",
          "type": "string",
          "enum": [
            "any"
          ]
        }
      ]
    },
    "StringArgumentStyle": {
      "oneOf": [
        {
          "description": "String arguments can be quoted or unquoted (default)",
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "description": "String arguments must be quoted",
          "type": "string",
          "enum": [
            "prefer_quoted"
          ]
        },
        {
          "description": "String arguments should be unquoted, when possible",
          "type": "string",
          "enum": [
            "prefer_unquoted"
          ]
        }
      ]
    }
  }
}